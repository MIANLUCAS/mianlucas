{"version":3,"sources":["store/actions/section.ts","store/actions/setting.ts","store/reducers/section.ts","store/actions/page.ts","store/reducers/setting.ts","store/reducers/page.ts","helpers/axios.ts","store/sagas/section.ts","store/sagas/setting.ts","store/sagas/index.ts","store/index.ts","components/SettingsNav/icons.tsx","helpers/utils.ts","components/SettingsNav/index.tsx","components/SettingsForm/SettingField/InputSwitch.tsx","components/SettingsForm/SettingField/index.tsx","components/FreeGuide/index.tsx","components/SettingsForm/index.tsx","pages/Settings/index.tsx","pages/License/index.tsx","pages/About/index.tsx","pages/Premium/index.tsx","pages/Help/index.tsx","pages/App.tsx","components/CouponsNav/index.tsx","index.tsx"],"names":["ESectionActionTypes","ESettingActionTypes","SectionActions","payload","type","READ_SECTIONS","READ_SECTION","SET_STORE_SECTIONS","SET_STORE_SECTION","TOGGLE_MODULE_SECTION","sections","action","data","idx","findIndex","i","id","clonedSections","cloneDeep","module","show","EPageActionTypes","SettingActions","UPDATE_SETTING","REHYDRATE_STORE_SETTINGS","REHYDRATE_STORE_SETTING","SET_STORE_SETTINGS","SET_STORE_SETTING","settings","clonedSettings","value","push","PageActions","setStorePage","SET_STORE_PAGE","page","axios","create","baseURL","wpApiSettings","root","timeout","headers","nonce","readSectionsSaga","readSectionSaga","processingCB","successCB","failCB","section","axiosInstance","defaults","call","get","response","put","error","actionListener","takeEvery","createSettingSaga","updateSettingSaga","deleteSettingSaga","readSettingSaga","rehydrateStoreSettingsSaga","rehydrateStoreSettingSaga","post","Error","updateData","delete","values","fields","filter","f","map","CREATE_SETTING","DELETE_SETTING","READ_SETTINGS","rootSaga","all","setting","bindMiddleware","middlewares","composeWithDevTools","require","applyMiddleware","MenuIcon","props","ControlOutlined","SettingOutlined","TagsOutlined","ScheduleOutlined","UserOutlined","LinkOutlined","MedicineBoxOutlined","ApiOutlined","StarOutlined","RocketOutlined","getPathPrefix","acfwAdminApp","admin_url","replace","location","origin","validateURL","str","RegExp","test","pathPrefix","connect","store","dispatch","actions","bindActionCreators","currentSection","app_pages","defaultKey","history","useHistory","length","className","active","paragraph","filteredSections","defaultSelectedKeys","title","Item","key","to","slug","label","onClick","updateSetting","setStoreSettingItem","action_notices","field","index","settingValues","setShowSpinner","validateInput","savedValue","placeholder","defaultValue","default","useState","saveTimeout","setSaveTimeout","undefined","handleValueChange","inputValue","needTimeout","updateValue","message","success","fail","clearTimeout","setTimeout","checked","defaultChecked","onChange","TextArea","rows","event","target","options","toString","style","width","onSelect","inputvalue","Option","indexOf","name","Text","Typography","SettingField","desc","desc_tip","validation","showSpinner","invalidInput","setInvalidInput","tooltip","gutter","span","placement","content","trigger","QuestionCircleOutlined","indicator","LoadingOutlined","fontSize","spin","FreeGuide","showSubtitle","showTag","free_guide","tag","subtitle","image","button","list","color","src","alt","dangerouslySetInnerHTML","__html","list_text","BulbFilled","href","help_link","link","size","text","defaultProps","sectionID","sectionFields","loading","readSections","readSection","URLSearchParams","useLocation","search","useEffect","logo","License","license_page","feature_comparison","license_status","specs","rel","s","About","about_page","main_card","cards","status","status_texts","button_texts","card","external","Meta","avatar","icon","description","Link","Premium","premium_page","header","logo_alt","feature","free","premium","btn_link","btn_text","Help","help_page","HelpPremium","acfwpElements","LicensePremium","is_acfwp_active","parseInt","appPage","coupon_nav","toplevel","links","aria-haspopup","aria-hidden","initialState","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","sectionsReducer","settingsReducer","pageReducer","run","initializeStore","exports","element","React","dom","ReactDOM","router","BrowserRouter","Route","Redirect","redux","sagaEffects","lodash","antd","antdIcons","moment","appStore","Provider","storeActions","document","querySelectorAll","forEach","domContainer","render","path","component","App","CouponsNav"],"mappings":"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","file":"static/js/main.0f33b835.chunk.js","sourcesContent":["// #region [Imports] ===================================================================================================\n\n// Types\nimport { ISection } from \"../../types/section\";\n\n// #endregion [Imports]\n\n// #region [Action Payloads] ===========================================================================================\n\nexport interface IReadSectionsActionPayload {\n  id?: string | null;\n  processingCB?: () => void;\n  successCB?: (arg: any) => void;\n  failCB?: (arg: any) => void;\n}\n\nexport interface IReadSectionActionPayload {\n  id: string | null;\n  processingCB?: () => void;\n  successCB?: (arg: any) => void;\n  failCB?: (arg: any) => void;\n}\n\nexport interface ISetStoreSectionsActionPayload {\n  data: ISection[];\n}\n\nexport interface ISetStoreSectionActionPayload {\n  data: ISection;\n}\n\nexport interface IToggleModuleSectionActionPayload {\n  module: string;\n  show: boolean;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum ESectionActionTypes {\n  READ_SECTIONS = \"READ_SECTIONS\",\n  READ_SECTION = \"READ_SECTION\",\n  SET_STORE_SECTIONS = \"SET_STORE_SECTIONS\",\n  SET_STORE_SECTION = \"SET_STORE_SECTION\",\n  TOGGLE_MODULE_SECTION = \"TOGGLE_MODULE_SECTION\",\n}\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const SectionActions = {\n  readSections: (payload: IReadSectionsActionPayload) => ({\n    type: ESectionActionTypes.READ_SECTIONS,\n    payload,\n  }),\n  readSection: (payload: IReadSectionActionPayload) => ({\n    type: ESectionActionTypes.READ_SECTION,\n    payload,\n  }),\n  setStoreSectionItems: (payload: ISetStoreSectionsActionPayload) => ({\n    type: ESectionActionTypes.SET_STORE_SECTIONS,\n    payload,\n  }),\n  setStoreSectionItem: (payload: ISetStoreSectionActionPayload) => ({\n    type: ESectionActionTypes.SET_STORE_SECTION,\n    payload,\n  }),\n  toggleModuleSection: (payload: IToggleModuleSectionActionPayload) => ({\n    type: ESectionActionTypes.TOGGLE_MODULE_SECTION,\n    payload,\n  }),\n};\n\n// #endregion [Action Creators]\n","// #region [Imports] ===================================================================================================\n\n// Types\nimport { ISettingValue } from \"../../types/settings\";\nimport { ISection } from \"../../types/section\";\n\n// #endregion [Imports]\n\n// #region [Action Payloads] ===========================================================================================\n\nexport interface ICreateSettingActionPayload {\n    data: ISettingValue,\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IUpdateSettingActionPayload {\n    data: ISettingValue;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IDeleteSettingActionPayload {\n    id: string;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IReadSettingsActionPayload {\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IRehydrateStoreSettingsActionPayload {\n    data?: ISection;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface IRehydrateStoreSettingActionPayload {\n    id: string;\n    data?: ISettingValue;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\n\nexport interface ISetStoreSettingsActionPayload {\n    data: ISettingValue[];\n}\n\nexport interface ISetStoreSettingActionPayload {\n    data: ISettingValue;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum ESettingActionTypes {\n    CREATE_SETTING = \"CREATE_SETTING\",\n    UPDATE_SETTING = \"UPDATE_SETTING\",\n    DELETE_SETTING = \"DELETE_SETTING\",\n    READ_SETTINGS = \"READ_SETTINGS\",\n    REHYDRATE_STORE_SETTINGS = \"REHYDRATE_STORE_SETTINGS\",\n    REHYDRATE_STORE_SETTING = \"REHYDRATE_STORE_SETTING\",\n    SET_STORE_SETTINGS = \"SET_STORE_SETTINGS\",\n    SET_STORE_SETTING = \"SET_STORE_SETTING\"\n}\n\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const SettingActions = {\n    createSetting: (payload: ICreateSettingActionPayload) => ({\n        type: ESettingActionTypes.CREATE_SETTING,\n        payload\n    }),\n    updateSetting: (payload: IUpdateSettingActionPayload) => ({\n        type: ESettingActionTypes.UPDATE_SETTING,\n        payload\n    }),\n    deleteSetting: (payload: IDeleteSettingActionPayload) => ({\n        type: ESettingActionTypes.DELETE_SETTING,\n        payload\n    }),\n    readSettings: (payload: IReadSettingsActionPayload) => ({\n        type: ESettingActionTypes.READ_SETTINGS,\n        payload\n    }),\n    rehydrateStoreSettings: (payload: IRehydrateStoreSettingsActionPayload) => ({\n        type: ESettingActionTypes.REHYDRATE_STORE_SETTINGS,\n        payload\n    }),\n    rehydrateStoreSetting: (payload: IRehydrateStoreSettingActionPayload) => ({\n        type: ESettingActionTypes.REHYDRATE_STORE_SETTING,\n        payload\n    }),\n    setStoreSettingItems: (payload: ISetStoreSettingsActionPayload) => ({\n        type: ESettingActionTypes.SET_STORE_SETTINGS,\n        payload\n    }),\n    setStoreSettingItem: (payload: ISetStoreSettingActionPayload) => ({\n        type: ESettingActionTypes.SET_STORE_SETTING,\n        payload\n    })\n};\n\n// #endregion [Action Creators]\n","// #region [Imports] ===================================================================================================\n\n// Libs\nimport cloneDeep from \"lodash/cloneDeep\";\n\n// Types\nimport { ISection } from \"../../types/section\";\n\n// Actions\nimport {\n  ISetStoreSectionsActionPayload,\n  ISetStoreSectionActionPayload,\n  IToggleModuleSectionActionPayload,\n  ESectionActionTypes,\n} from \"../actions/section\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n  sections: ISection[] = [],\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ESectionActionTypes.SET_STORE_SECTIONS: {\n      const { data } = action.payload as ISetStoreSectionsActionPayload;\n      return data;\n    }\n\n    case ESectionActionTypes.SET_STORE_SECTION: {\n      const { data } = action.payload as ISetStoreSectionActionPayload;\n      const idx = sections.findIndex((i) => i.id === data.id);\n\n      if (idx < 0) return sections;\n\n      const clonedSections = cloneDeep(sections);\n\n      clonedSections[idx] = { ...clonedSections[idx], ...data };\n\n      return clonedSections;\n    }\n\n    case ESectionActionTypes.TOGGLE_MODULE_SECTION: {\n      const {\n        module,\n        show,\n      } = action.payload as IToggleModuleSectionActionPayload;\n      const idx = sections.findIndex((i) => i.module && i.module === module);\n\n      if (idx < 0) return sections;\n\n      const clonedSections = cloneDeep(sections);\n\n      clonedSections[idx].show = show;\n\n      return clonedSections;\n    }\n\n    default:\n      return sections;\n  }\n};\n\n// #endregion [Reducer]\n","// #region [Action Payloads] ===========================================================================================\n\nexport interface ISetStorePageActionPayload {\n    data: string;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum EPageActionTypes {\n    SET_STORE_PAGE = \"SET_STORE_PAGE\"\n}\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const PageActions = {\n    setStorePage: (payload: ISetStorePageActionPayload) => ({\n        type: EPageActionTypes.SET_STORE_PAGE,\n        payload\n    })\n};\n\n// #endregion [Action Creators]","// #region [Imports] ===================================================================================================\n\n// Libs\nimport cloneDeep from \"lodash/cloneDeep\";\n\n// Types\nimport { ISettingValue } from \"../../types/settings\";\n\n// Actions\nimport {\n    ISetStoreSettingsActionPayload,\n    ISetStoreSettingActionPayload,\n    ESettingActionTypes\n} from \"../actions/setting\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n    settings: ISettingValue[] = [],\n    action: { type: string; payload: any }\n) => {\n    switch (action.type) {\n        case ESettingActionTypes.SET_STORE_SETTINGS: {\n            const { data } = action.payload as ISetStoreSettingsActionPayload;\n            let clonedSettings = cloneDeep(settings);\n\n            for (const value of data) {\n\n                let idx = settings.findIndex(i => i.id === value.id);\n                if ( clonedSettings[idx] )\n                    clonedSettings[idx] = value;\n                else\n                    clonedSettings.push( value );\n            }\n\n            return clonedSettings;\n        }\n\n        case ESettingActionTypes.SET_STORE_SETTING: {\n            const { data } = action.payload as ISetStoreSettingActionPayload;\n            const idx = settings.findIndex(i => i.id === data.id);\n\n            if (idx < 0) return settings;\n\n            const clonedSettings = cloneDeep(settings);\n\n            clonedSettings[idx] = { ...clonedSettings[idx], ...data };\n\n            return clonedSettings;\n        }\n\n        default:\n            return settings;\n    }\n};\n\n// #endregion [Reducer]\n","// #region [Imports] ===================================================================================================\n\n// Actions\nimport {\n    ISetStorePageActionPayload,\n    EPageActionTypes\n} from \"../actions/page\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n    page: string = '',\n    action: { type: string; payload: any }\n) => {\n\n    switch (action.type) {\n\n        case EPageActionTypes.SET_STORE_PAGE: {\n            const { data } = action.payload as ISetStorePageActionPayload;\n            return data;\n        }\n\n        default:\n            return page;\n    }\n};\n\n// #endregion [Reducer]\n","// #region [Imports] ===================================================================================================\n\nimport axios from \"axios\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var wpApiSettings: any;\n\n// #endregion [Variables]\n\nexport default axios.create({\n    baseURL: wpApiSettings.root,\n    timeout: 30000,\n    headers: { \"X-WP-Nonce\": wpApiSettings.nonce }\n});\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport \"cross-fetch/polyfill\";\nimport { put, call, takeEvery } from \"redux-saga/effects\";\n\n// Actions\nimport {\n    IReadSectionsActionPayload,\n    IReadSectionActionPayload,\n    ESectionActionTypes,\n    SectionActions\n} from \"../actions/section\";\nimport { SettingActions } from \"../actions/setting\";\n\n// Helpers\nimport axiosInstance from \"../../helpers/axios\";\n\n// #endregion [Imports]\n\n// #region [Sagas] =====================================================================================================\n\nexport function* readSectionsSaga(action: {\n    type: string;\n    payload: IReadSectionsActionPayload;\n}) {\n    const { id, processingCB, successCB, failCB } = action.payload;\n    const section = id ? id : \"general_section\";\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        axiosInstance.defaults.headers[ 'section' ] = section;\n\n        const response = yield call(() =>\n            axiosInstance.get(`coupons/v1/settings/sections`)\n        );\n\n        if (response && response.data) {\n\n            const idx = section ? response.data.findIndex((i: any) => i.id === section ) : 0;\n\n            yield put(\n                SettingActions.rehydrateStoreSettings({ data: response.data[idx] })\n            );\n\n            yield put(\n                SectionActions.setStoreSectionItems({ data: response.data })\n            );\n            \n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\nexport function* readSectionSaga(action: {\n    type: string;\n    payload: IReadSectionActionPayload;\n}) {\n    const { id, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        const section = id ? id : \"general_section\";\n\n        const response = yield call(() =>\n            axiosInstance.get(`coupons/v1/settings/sections/${section}`)\n        );\n\n        if (response && response.data) {\n            \n            yield put(\n                SettingActions.rehydrateStoreSettings({ data: response.data })\n            );\n\n            yield put(\n                SectionActions.setStoreSectionItem({ data: response.data })\n            );\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\n// #endregion [Sagas]\n\n// #region [Action Listeners] ==========================================================================================\n\nexport const actionListener = [\n    takeEvery(ESectionActionTypes.READ_SECTIONS, readSectionsSaga),\n    takeEvery(ESectionActionTypes.READ_SECTION, readSectionSaga),\n];\n\n// #endregion [Action Listeners]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport \"cross-fetch/polyfill\";\nimport { put, call, takeEvery } from \"redux-saga/effects\";\n\n// Types\nimport { ISettingValue } from \"../../types/settings\";\n\n// Actions\nimport {\n    ICreateSettingActionPayload,\n    IUpdateSettingActionPayload,\n    IDeleteSettingActionPayload,\n    IReadSettingsActionPayload,\n    IRehydrateStoreSettingsActionPayload,\n    IRehydrateStoreSettingActionPayload,\n    ESettingActionTypes,\n    SettingActions\n} from \"../actions/setting\";\nimport {\n    SectionActions\n} from \"../actions/section\";\n\n// Helpers\nimport axiosInstance from \"../../helpers/axios\";\n\n// #endregion [Imports]\n\n// #region [Sagas] =====================================================================================================\n\nexport function* createSettingSaga(action: {\n    type: string;\n    payload: ICreateSettingActionPayload;\n}) {\n    const { data, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        const response = yield call(() =>\n            axiosInstance.post(`coupons/v1/setting/sections`, data)\n        );\n\n        if (response && response.data) {\n            yield put(SettingActions.rehydrateStoreSettings({}));\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e, payload: data });\n    }\n}\n\nexport function* updateSettingSaga(action: {\n    type: string;\n    payload: IUpdateSettingActionPayload;\n}) {\n    const { data, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        if (!data.id)\n            throw new Error(\"Can not update survey. No survey id provided.\");\n\n        const response = yield call(() => {\n            const { id, ...updateData } = data;\n\n            return axiosInstance.put(\n                `coupons/v1/settings/${id}`,\n                updateData\n            );\n        });\n\n        if (response && response.data) {\n\n            yield put(\n                SettingActions.rehydrateStoreSetting({\n                    id: response.data.id,\n                    data: response.data\n                })\n            );\n\n            // toggle module display in settings nav.\n            if ( \"module\" === data.type ) {\n                yield put(\n                    SectionActions.toggleModuleSection({\n                        module: data.id,\n                        show: \"yes\" === data.value\n                    })\n                );\n            }\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e, payload: data });\n    }\n}\n\nexport function* deleteSettingSaga(action: {\n    type: string;\n    payload: IDeleteSettingActionPayload;\n}) {\n    const { id, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        const response = yield call(() =>\n            axiosInstance.delete(`coupons/v1/settings/${id}`)\n        );\n\n        if (response && response.data) {\n            yield put(SettingActions.rehydrateStoreSettings({}));\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\nexport function* readSettingSaga(action: {\n    type: string;\n    payload: IReadSettingsActionPayload;\n}) {\n    const { processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        const response = yield call(() =>\n            axiosInstance.get(`coupons/v1/settings/`)\n        );\n\n        if (response && response.data) {\n            yield put(\n                SettingActions.rehydrateStoreSettings({ data: response.data })\n            );\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\nexport function* rehydrateStoreSettingsSaga(action: {\n    type: string;\n    payload: IRehydrateStoreSettingsActionPayload;\n}) {\n    const { data, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        if ( data ) {\n\n            let values: ISettingValue[] = data.fields.filter( f => f.type !== \"title\" && f.type !== \"sectionend\" );\n            values = values.map( f => ({ id: f.id, value: f.value }) );\n\n            yield put(\n                SettingActions.setStoreSettingItems({ data: values })\n            );\n\n            if (typeof successCB === \"function\") successCB(values);\n        }\n\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\nexport function* rehydrateStoreSettingSaga(action: {\n    type: string;\n    payload: IRehydrateStoreSettingActionPayload;\n}) {\n    const { id, data, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        if (!data) {\n            const response = yield call(() =>\n                axiosInstance.get(`coupons/v1/settings/${id}`)\n            );\n\n            if (response && response.data) {\n                yield put(\n                    SettingActions.setStoreSettingItem({ data: response.data })\n                );\n\n                if (typeof successCB === \"function\") successCB(response);\n            }\n        } else {\n            yield put(SettingActions.setStoreSettingItem({ data }));\n\n            if (typeof successCB === \"function\") successCB(data);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\n// #endregion [Sagas]\n\n// #region [Action Listeners] ==========================================================================================\n\nexport const actionListener = [\n    takeEvery(ESettingActionTypes.CREATE_SETTING, createSettingSaga),\n    takeEvery(ESettingActionTypes.UPDATE_SETTING, updateSettingSaga),\n    takeEvery(ESettingActionTypes.DELETE_SETTING, deleteSettingSaga),\n    takeEvery(ESettingActionTypes.READ_SETTINGS, readSettingSaga),\n    takeEvery(\n        ESettingActionTypes.REHYDRATE_STORE_SETTINGS,\n        rehydrateStoreSettingsSaga\n    ),\n    takeEvery(\n        ESettingActionTypes.REHYDRATE_STORE_SETTING,\n        rehydrateStoreSettingSaga\n    )\n];\n\n// #endregion [Action Listeners]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport { all } from \"redux-saga/effects\";\n\n// Sagas\nimport * as section from \"./section\";\nimport * as setting from \"./setting\";\n\n// #endregion [Imports]\n\n// #region [Root Saga] =================================================================================================\n\nexport default function* rootSaga() {\n    yield all([...section.actionListener, ...setting.actionListener]);\n}\n\n// #endregion [Root Saga]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\n// Types\nimport { IStore } from \"../types/store\";\n\n// Reducers\nimport sectionsReducer from \"./reducers/section\";\nimport settingsReducer from \"./reducers/setting\";\nimport pageReducer from \"./reducers/page\";\n\n// Saga\nimport rootSaga from \"./sagas\";\n\n// #endregion [Imports]\n\n// #region [Store] =====================================================================================================\n\n/**\n * !Important\n * Comment this function out when releasing for production.\n */\nconst bindMiddleware = (middlewares: any[]) => {\n  const { composeWithDevTools } = require(\"redux-devtools-extension\");\n  return composeWithDevTools(applyMiddleware(...middlewares));\n};\n\nexport default function initializeStore(\n  initialState: IStore | undefined = undefined\n) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = createStore(\n    combineReducers({\n      sections: sectionsReducer,\n      settingValues: settingsReducer,\n      page: pageReducer,\n    }),\n    initialState,\n    bindMiddleware([sagaMiddleware])\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n\n// #endregion [Store]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport {\n  ControlOutlined,\n  SettingOutlined,\n  TagsOutlined,\n  ScheduleOutlined,\n  UserOutlined,\n  LinkOutlined,\n  MedicineBoxOutlined,\n  ApiOutlined,\n  StarOutlined,\n  RocketOutlined,\n} from \"@ant-design/icons\";\n\n// #endregion [Imports]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n  section: string;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst MenuIcon = (props: any) => {\n  const { section } = props;\n\n  switch (section) {\n    case \"modules_section\":\n      return <ControlOutlined />;\n\n    case \"general_section\":\n      return <SettingOutlined />;\n\n    case \"bogo_deals_section\":\n      return <TagsOutlined />;\n\n    case \"scheduler_section\":\n      return <ScheduleOutlined />;\n\n    case \"role_restrictions_section\":\n      return <UserOutlined />;\n\n    case \"url_coupons_section\":\n      return <LinkOutlined />;\n\n    case \"help_page\":\n      return <MedicineBoxOutlined />;\n\n    case \"license_page\":\n      return <ApiOutlined />;\n\n    case \"premium_upgrade\":\n      return <StarOutlined />;\n\n    case \"loyalty_program_section\":\n    case \"loyalty_program\":\n      return <RocketOutlined />;\n  }\n\n  return null;\n};\n\nexport default MenuIcon;\n\n// #endregion [Component]\n","// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\ndeclare var location: any;\n\n// #endregion [Variables]\n\nexport const getPathPrefix = function () {\n  return acfwAdminApp.admin_url.replace(location.origin, \"\");\n};\n\nexport const validateURL = (str: string) => {\n  const pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n    \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n    \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n    \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n    \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!pattern.test(str);\n};\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Skeleton, Menu } from \"antd\";\n\n// Actions\nimport { PageActions } from \"../../store/actions/page\";\n\n// Types\nimport { IStore } from \"../../types/store\";\nimport { ISection } from \"../../types/section\";\n\n// SCSS\nimport \"./index.scss\";\n\n// Components\nimport MenuIcon from \"./icons\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\nconst { setStorePage } = PageActions;\nconst pathPrefix = getPathPrefix();\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IActions {\n    setStorePage: typeof setStorePage;\n}\n\ninterface IProps {\n    sections: ISection[];\n    currentSection: string|null;\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst SettingsNav = (props: IProps) => {\n\n    const { sections , currentSection, actions } = props;\n    const { app_pages } = acfwAdminApp;\n    const defaultKey: string = currentSection ? currentSection : \"general_section\";\n    const history = useHistory();\n\n    if ( sections.length < 1 ) {\n        return (\n            <div className=\"settings-nav-skeleton\">\n                <Skeleton active paragraph={false} />\n                <Skeleton active paragraph={false} />\n                <Skeleton active paragraph={false} />\n                <Skeleton active paragraph={false} />\n                <Skeleton active paragraph={false} />\n            </div>\n        )\n    }\n\n    const handleMenuClick = (id: string) => {\n        history.push(`${ pathPrefix }admin.php?page=${id}`);\n        actions.setStorePage({ data: id });\n    }\n\n    const filteredSections = sections.filter( ({show}) => show );\n\n    return (\n        <Menu\n            className=\"acfw-settings-nav\"\n            defaultSelectedKeys={[defaultKey]}\n        >\n            { filteredSections.map( ({ id , title }) => (\n                <Menu.Item key={ id }>\n                    <Link to={ `${ pathPrefix }admin.php?page=acfw-settings&section=${id}` }>\n                        <MenuIcon section={ id } />\n                        { title }\n                    </Link>\n                </Menu.Item>\n            ) ) }\n\n            { app_pages\n              .filter( ({slug}: any) => slug !== 'acfw-settings' && slug !== 'acfw-about' )\n              .map(({ slug, label, page }: any) => (\n                <Menu.Item \n                    key={ page }\n                    className={ page }\n                >\n                    <button \n                        className=\"buttonlink\"\n                        onClick={ () => handleMenuClick( slug ) }\n                    >\n                        <MenuIcon section={ page } />\n                        { label }\n                    </button>\n                </Menu.Item>\n            ) ) }\n\n        </Menu>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({ sections: store.sections });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ setStorePage }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsNav);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useState } from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Input, Switch, Select, message } from \"antd\";\n\n// Types\nimport { IStore } from \"../../../types/store\";\nimport { ISectionField } from \"../../../types/section\";\n\n// Actions\nimport { SettingActions } from \"../../../store/actions/setting\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\ndeclare var acfwpElements: any;\n\nconst { updateSetting, setStoreSettingItem } = SettingActions;\nconst { action_notices } = acfwAdminApp;\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IActions {\n    updateSetting: typeof updateSetting;\n    setStoreSettingItem: typeof setStoreSettingItem;\n}\n\ninterface IProps {\n    field: ISectionField;\n    setShowSpinner: any;\n    validateInput: any;\n    value: any;\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst InputSwitch = (props: IProps) => {\n\n    const { field, setShowSpinner, validateInput, value: savedValue, actions } = props;\n    const { id, type, placeholder, default: defaultValue } = field;\n    const [saveTimeout, setSaveTimeout]: [any, any] = useState(null);\n    const value = savedValue !== undefined && savedValue !== false ? savedValue : defaultValue;\n\n    const handleValueChange = (inputValue: unknown, needTimeout: boolean = false ) => {\n\n        const updateValue = () => {\n\n            // validate value\n            if ( ! validateInput( inputValue ) ) return;\n\n            // set state early to prevent rerenders.\n            actions.setStoreSettingItem({ data: {id: id, value: inputValue} });\n\n            // update setting value via api\n            actions.updateSetting({ \n                data: {id: id, value: inputValue, type: type},\n                processingCB: () => setShowSpinner(true),\n                successCB: () => {\n                    message.success(<><strong>{field.title}</strong> {action_notices.success}</>);\n                    setShowSpinner(false);\n                },\n                failCB: () => {\n                    message.error(<><strong>{field.title}</strong> {action_notices.fail}</>);\n                    setShowSpinner(false);\n                },\n            });\n        };\n\n        // we add timeout for fields that requires users to update value by typing.\n        if ( needTimeout ) {\n\n            // clear timeout when user is still editing\n            if ( saveTimeout ) {\n                clearTimeout( saveTimeout );\n                setSaveTimeout( null );\n            }\n\n            // set 1 second delay before updating value.\n            setSaveTimeout( setTimeout( updateValue , 1000 ) );\n\n        } else\n            updateValue();        \n    }\n    \n    if ( \"checkbox\" === type || \"module\" === type ) {\n        return <Switch \n            key={ id }\n            checked={ value === \"yes\" } \n            defaultChecked={ value === \"yes\" } \n            onChange={ inputValue => handleValueChange(inputValue ? \"yes\" : \"\") } \n        />;\n    }\n\n    if ( \"textarea\" === type ) {\n        return <Input.TextArea \n            key={ id }\n            rows={3} \n            placeholder={ placeholder } \n            defaultValue={ value } \n            onChange={ (event) => handleValueChange( event.target.value , true ) }\n        />;\n    }\n\n    if ( \"select\" === type ) {\n        const { options } = field;\n        return (\n            <Select \n                key={ id } \n                defaultValue={ value.toString() }\n                style={ { width: `50%` } }\n                placeholder={ placeholder } \n                onSelect={ inputvalue => handleValueChange( inputvalue ) }\n            >\n                { options ? options.map( ({key, label}) => <Select.Option key={ key.toString() } value={ key.toString() }>{ label }</Select.Option> ) : null }\n            </Select>\n        );\n    }\n\n    if ( [ \"text\", \"url\", \"number\" ].indexOf( type ) > -1 )\n        return <Input \n            key={ id }\n            type={ type } \n            name={ id } \n            placeholder={ placeholder } \n            defaultValue={ value } \n            onChange={ event => handleValueChange( event.target.value, true ) }\n        />;\n\n    if ( \"price\" === type )\n        return <Input \n                type=\"text\" \n                className=\"wc_input_price\"\n                name={ id } \n                placeholder={ placeholder } \n                defaultValue={ value } \n                onChange={ (event: any) => handleValueChange( event.target.value, true ) }\n            />;\n\n    return null;\n};\n\nconst mapStateToProps = (store: IStore, props: any) => {\n\n    const { id } = props.field;\n    const index = store.settingValues.findIndex((i: any) => i.id === id );\n    const value = index > -1 ? store.settingValues[index].value : '';\n    \n    return { value: value };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ updateSetting, setStoreSettingItem }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputSwitch);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useState } from \"react\";\nimport { Typography, Spin, Row, Col, Divider, Popover } from \"antd\";\nimport { QuestionCircleOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { validateURL } from \"../../../helpers/utils\";\n\n// Styles\nimport \"./index.scss\";\n\n// Components\nimport InputSwitch from \"./InputSwitch\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var wp: any;\ndeclare var acfwAdminApp: any;\nconst { Text } = Typography;\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n  field: any;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst SettingField = (props: IProps) => {\n  const { field } = props;\n  const { id, title, type, desc, desc_tip } = field;\n  const { validation } = acfwAdminApp;\n  const [showSpinner, setShowSpinner]: [boolean, any] = useState(false);\n  const [invalidInput, setInvalidInput]: [boolean, any] = useState(false);\n\n  const tooltip = desc_tip ? (\n    <div className=\"setting-tooltip-content\">{desc_tip}</div>\n  ) : null;\n\n  if (\"title\" === type) {\n    return (\n      <div className=\"form-heading\">\n        <h1>{title}</h1>\n        <p>{desc}</p>\n      </div>\n    );\n  }\n\n  if (\"sectionend\" === type) return null;\n\n  const validateInput = (value: unknown) => {\n    // validate url value.\n    if (value && type === \"url\" && !validateURL(value + \"\")) {\n      setInvalidInput(true);\n      return false;\n    }\n\n    setInvalidInput(false);\n    return true;\n  };\n\n  return (\n    <Row gutter={16} className=\"form-control\" id={`${id}_field`} key={id}>\n      <Divider />\n      <Col span={8}>\n        <label>\n          <strong>{title}</strong>\n        </label>\n        {desc_tip ? (\n          <Popover placement=\"right\" content={tooltip} trigger=\"click\">\n            <QuestionCircleOutlined className=\"setting-tooltip-icon\" />\n          </Popover>\n        ) : null}\n      </Col>\n      <Col className=\"setting-field-column\" span={16}>\n        <InputSwitch\n          field={field}\n          setShowSpinner={setShowSpinner}\n          validateInput={validateInput}\n        />\n        {showSpinner ? (\n          <Spin indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />} />\n        ) : null}\n        <div className={`invalid-input${invalidInput ? \" show\" : \"\"}`}>\n          {invalidInput ? (\n            <Text type=\"danger\">\n              {validation[type] ? validation[type] : validation.default}\n            </Text>\n          ) : null}\n        </div>\n        {desc ? (\n          <p>\n            <Text>{desc}</Text>\n          </p>\n        ) : null}\n      </Col>\n    </Row>\n  );\n};\n\nexport default SettingField;\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { Tag, Button } from \"antd\";\nimport { BulbFilled } from \"@ant-design/icons\";\n\n// CSS\nimport \"./index.scss\";\n\n// #endregion [Imports]\n\n// #region [Variables] ================================================================================================\n\ndeclare var acfwAdminApp: any;\n\n// #endregion [Variables]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n    className?: string;\n    showSubtitle?: boolean;\n    showTag?: boolean;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] ================================================================================================\n\nconst FreeGuide = (props: IProps) => {\n\n    const { className, showSubtitle, showTag } = props;\n\n    const { free_guide: {\n        tag,\n        title,\n        subtitle,\n        content,\n        image,\n        button,\n        list\n    } } = acfwAdminApp;\n\n    return (\n        <div className={`coupons-free-guide ${ className }`}>\n            <div className=\"inner\">\n                { showTag ? <Tag color=\"#1693A7\">{ tag }</Tag> : null }\n                <h2>{ title }</h2>\n                <img src={ image } alt={ title } />\n                { showSubtitle ? <h3>{ subtitle }</h3> : null }\n                <p dangerouslySetInnerHTML={{ __html: content }} />\n                <ul>\n                    { list.map( (list_text: string, index: number) => (\n                        <li key={ index }>\n                            <BulbFilled />\n                            { list_text }\n                        </li>\n                    ) ) }\n                </ul>\n                <p>\n                    <Button\n                        type=\"link\"\n                        className=\"cta\"\n                        href={ showSubtitle ? button.help_link : button.link }\n                        target=\"_blank\"\n                        size=\"large\"\n                    >\n                        { button.text }\n                    </Button>\n                </p>\n            </div>\n        </div>\n    );\n};\n\nFreeGuide.defaultProps = {\n    className: '',\n    showSubtitle: false,\n    showTag: true,\n};\n\nexport default FreeGuide;\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Skeleton, Divider } from \"antd\";\n\n// Types\nimport { IStore } from \"../../types/store\";\nimport { ISection } from \"../../types/section\";\nimport { ISettingValue } from \"../../types/settings\";\n\n// Components\nimport SettingField from \"./SettingField\";\nimport FreeGuide from \"../FreeGuide\";\n\n// #endregion [Imports]\n\n// #region [Interfaces] ================================================================================================\n\ninterface IProps {\n    sections: ISection[];\n    settingValues: ISettingValue[]\n    currentSection: string|null;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst SettingsForm = (props: IProps) => {\n\n    const { sections, settingValues, currentSection } = props;\n\n    const idx           = currentSection ? sections.findIndex(i => i.id === currentSection ) : 0;\n    const sectionID     = sections.length ? sections[idx].id : '';\n    const sectionFields = sections.length ? sections[idx].fields : [];\n\n    if ( sectionFields.length < 1 || settingValues.length < 1 ) {\n        return (\n            <>\n                <Skeleton loading={true} active paragraph={{ rows: 1 }} />\n                <Divider />\n                <Skeleton loading={true} active paragraph={{ rows: 2 }} title={false} />\n                <Divider />\n                <Skeleton loading={true} active paragraph={{ rows: 2 }} title={false} />\n                <Divider />\n                <Skeleton loading={true} active paragraph={{ rows: 2 }} title={false} />\n            </>\n        )\n    }\n\n    return (\n        <div className={`settings-form ${sectionID}-form`}>\n            { sectionFields.map( field => <SettingField key={ field.id } field={ field } /> ) }\n\n            { ! currentSection || \"general_section\" === currentSection ? (\n                <>\n                    <Divider />\n                    <FreeGuide />\n                </>\n            ) : null }\n        </div>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({ sections: store.sections, settingValues: store.settingValues });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({}, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsForm);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Row, Col } from \"antd\";\n\n// Types\nimport { IStore } from \"../../types/store\";\nimport { ISection } from \"../../types/section\";\n\n// Actions\nimport { SectionActions } from \"../../store/actions/section\";\n\n// Components\nimport SettingsNav from \"../../components/SettingsNav\";\nimport SettingsForm from \"../../components/SettingsForm\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\n\nconst { readSections, readSection } = SectionActions;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n    readSections: typeof readSections;\n    readSection: typeof readSection;\n}\n\ninterface IProps {\n    sections: ISection[];\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst Settings = (props: IProps) => {\n\n    const { sections , actions } = props;\n\n    const urlParams = new URLSearchParams(useLocation().search);\n    const currentSection = urlParams.get(\"section\");\n\n    // fetch all sections on first load.\n    useEffect(() => {\n\n        if ( sections.length > 0 ) return;\n\n        actions.readSections({ id: currentSection });\n\n    }, [actions]);\n\n    // fetch fields of current section.\n    useEffect(() => {\n\n        if ( sections.length < 1 ) return;\n\n        const idx = currentSection ? sections.findIndex(i => i.id === currentSection ) : 0;\n\n        if ( sections[idx].fields.length < 1 )\n            actions.readSection({ id: currentSection });\n\n    }, [sections, actions, currentSection]);\n\n    return (\n    <>\n        <div className=\"page-header settings-header\">\n            <img className=\"acfw-logo\" src={ acfwAdminApp.logo } alt=\"acfw logo\" />\n            <h1>{ acfwAdminApp.title }</h1>\n            <p>{ acfwAdminApp.desc }</p>\n        </div>\n        <Row className=\"settings-content\">\n            <Col span={6}>\n                <SettingsNav currentSection={ currentSection } />\n            </Col>\n            <Col span={18} className=\"content-column\">\n                <SettingsForm currentSection={ currentSection } />\n            </Col>\n        </Row>\n    </>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({ sections: store.sections });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ readSections , readSection }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\n\n// Styles\nimport \"./index.scss\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\n\n// #endregion [Variables]\n\n// #region [Component] =================================================================================================\n\nconst License = () => {\n\n    const { license_page: { \n        title, \n        desc, \n        feature_comparison, \n        license_status, \n        content, \n        specs\n    } } = acfwAdminApp;\n\n    return (\n        <div id=\"license-placeholder\">\n            <div className=\"overview\">\n                <img className=\"acfw-logo\" src={ acfwAdminApp.logo } alt=\"acfw logo\" />\n                <h1>{ title }</h1>\n                <p>{ desc }</p>\n                <a \n                    className=\"action-button feature-comparison\" \n                    href={ feature_comparison.link } \n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    { feature_comparison.text }\n                </a>\n            </div>\n            <div className=\"license-info\">\n\n                <div className=\"heading\">\n                    <div className=\"left\">\n                        <span>{ license_status.label }</span>\n                    </div>\n                    <div className=\"right\">\n                        <a \n                            className=\"action-button upgrade-premium\" \n                            href={ license_status.link }\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            >\n                            { license_status.text }\n                        </a>\n                    </div>\n                </div>\n\n                <div className=\"content\">\n                    <h2>{ content.title }</h2>\n                    <p>{ content.text }</p>\n\n                    <table className=\"license-specs\">\n                        <thead>\n                            <tr>\n                                { specs.map( (s: any) => (<th key={ s.label }>{ s.label }</th>) ) }\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                { specs.map( (s: any) => (<td key={ s.value }>{ s.value }</td>) ) }\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default License;\n\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { Row, Col, Card, Button, Avatar } from \"antd\";\n\n// CSS\nimport \"./index.scss\";\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IAboutCard {\n    icon: string;\n    title: string;\n    content: string;\n    action: IAboutAction;\n}\n\ninterface IAboutAction {\n    status: string;\n    link: string;\n    external: boolean\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst About = () => {\n\n    const { about_page : {\n        title,\n        desc,\n        main_card,\n        cards,\n        status,\n        status_texts,\n        button_texts\n    } } = acfwAdminApp;\n\n    return (\n        <div className=\"about-page\">\n            <div className=\"page-header about-header\">\n                <img className=\"acfw-logo\" src={ acfwAdminApp.logo } alt=\"acfw logo\" />\n                <h1>{ title }</h1>\n                <p>{ desc }</p>\n            </div>\n            <Row className=\"about-rymera-team\">\n                <Col className=\"content\" span={12}>\n                    <div className=\"inner\">\n                        <h2>{ main_card.title }</h2>\n                        { main_card.content.map( (text: string, key: number) => <p key={ key }>{ text }</p> ) }\n                    </div>\n                </Col>\n                <Col className=\"photo\" span={12}>\n                    <img src={ main_card.image } alt=\"Rymera Team\" />\n                </Col>\n            </Row>\n            <Row className=\"plugin-cards\" gutter={10}>\n                { cards.map( (card: IAboutCard, key: number) => (\n                    <Col  key={ key } span={12}>\n                        <Card\n                            actions={[\n                                (\n                                    <>\n                                        <strong>{ status }: </strong> \n                                        <span>{ status_texts[ card.action.status ] }</span>\n                                    </>\n                                ),\n                                card.action.link ? (\n                                    <Button \n                                        type=\"primary\" \n                                        href={ card.action.link } \n                                        target={ card.action.external ? `_blank` : undefined }\n                                    >\n                                        { button_texts[ card.action.status ] }\n                                    </Button>\n                                ) : null\n                            ]}\n                        >\n                            <Card.Meta \n                                avatar={ <Avatar src={ card.icon } /> }\n                                title={ card.title }\n                                description={ card.content }\n                            />\n                        </Card>\n                    </Col>\n                ) ) }\n            </Row>\n        </div>\n    );\n}\n\nexport default About;\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { Typography } from \"antd\";\n\n// Styles\nimport \"./index.scss\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\nconst { Text, Link } = Typography;\n\n// #endregion [Variables]\n\n// #region [Component] =================================================================================================\n\nconst Premium = () => {\n\n    const { premium_page: {\n        image,\n        title, \n        desc, \n        header, \n        rows, \n        action\n    }, logo_alt } = acfwAdminApp;\n\n    return (\n        <div id=\"acfw-premium\" className=\"acfwf-upgrade-settings-block\">\n\n            <p><img className=\"logo\" src={ image } alt={ logo_alt } /></p>\n            <h2 dangerouslySetInnerHTML={{ __html: title }} />\n            <p><Text>{ desc }</Text></p>\n\n            <div className=\"responsive-table\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th className=\"feature\">\n                                <Text>{ header.feature }</Text>\n                            </th>\n                            <th className=\"free\">\n                                <Text>{ header.free }</Text>\n                            </th>\n                            <th className=\"premium\">\n                                <Text>{ header.premium }</Text>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { rows.map( ({feature, free, premium}: any, key: number) => (\n                            <tr key={ key }>\n                                <td className=\"feature\">\n                                    <Text>{ feature }</Text>\n                                </td>\n                                <td className=\"free dashicons-before dashicons-no\">\n                                    <Text>{ free }</Text>\n                                </td>\n                                <td className=\"premium dashicons-before dashicons-yes-alt\">\n                                    <Text>{ premium }</Text>\n                                </td>\n                            </tr>\n                        ) ) }\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"cta-block\">\n                <h3><Text>{ action.title }</Text></h3>\n                <p>\n                    <Link className=\"acfw-upgrade-button\" href={ action.btn_link } target=\"_blank\">{ action.btn_text }</Link>\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Premium;\n\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { Row, Col, Card, Button } from \"antd\";\n\n// CSS\nimport \"./index.scss\";\n\n// Components\nimport FreeGuide from \"../../components/FreeGuide\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\ndeclare var acfwpElements: any;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IHelpCard {\n    title: string;\n    content: string;\n    action: IHelpCardAction\n}\n\ninterface IHelpCardAction {\n    link: string;\n    text: string;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst Help = () => {\n\n    const { help_page: {\n        title,\n        desc,\n        cards\n    }} = acfwAdminApp;\n\n    const { HelpPremium } = acfwpElements;\n\n    return (\n        <div className=\"help-page\">\n            <div className=\"page-header help-header\">\n                <img className=\"acfw-logo\" src={ acfwAdminApp.logo } alt=\"acfw logo\" />\n                <h1>{ title }</h1>\n                <p>{ desc }</p>\n            </div>\n            <Row gutter={10}>\n                { cards.map( (card: IHelpCard, key: number) => (\n                    <Col key={key} className=\"acfw-border-box\" span={12}>\n                        <Card>\n                        <h2>{ card.title }</h2>\n                        <p>{ card.content }</p>\n                        <Button \n                            type=\"primary\" \n                            href={ card.action.link }\n                            size=\"large\"\n                            target=\"_blank\"\n                        >\n                            { card.action.text }\n                        </Button>\n                        </Card>\n                    </Col>\n                ) ) }\n            </Row>\n            <Row gutter={10}>\n                <Col className=\"acfw-border-box\" span={24}>\n                    <FreeGuide className=\"help-guide\" showSubtitle={true} showTag={false} />\n                </Col>\n            </Row>\n            { HelpPremium ? <HelpPremium /> : null }\n        </div>\n    );\n};\n\nexport default Help;\n\n// #endregion [Component]","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\n// Pages\nimport Settings from \"./Settings\";\nimport License from \"./License\";\nimport About from \"./About\";\nimport PremiumUpsell from \"./Premium\";\nimport Help from \"./Help\";\n\n// Actions\nimport { PageActions } from \"../store/actions/page\";\n\n// Types\nimport { IStore } from \"../types/store\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwpElements: any;\n\nconst { LicensePremium } = acfwpElements;\nconst is_acfwp_active = parseInt(acfwpElements.is_acfwp_active);\nconst { setStorePage } = PageActions;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n  setStorePage: typeof setStorePage;\n}\n\ninterface IProps {\n  page: string;\n  actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst App = (props: IProps) => {\n  const { page, actions } = props;\n\n  const urlParams = new URLSearchParams(useLocation().search);\n  const appPage = urlParams.get(\"page\");\n\n  acfwpElements.appPage = appPage;\n\n  useEffect(() => {\n    actions.setStorePage({ data: appPage ? appPage : \"\" });\n  }, [appPage, actions]);\n\n  return (\n    <div className=\"app\">\n      {page === \"acfw-settings\" ? <Settings /> : null}\n\n      {page === \"acfw-license\" && is_acfwp_active ? <LicensePremium /> : null}\n\n      {page === \"acfw-license\" && !is_acfwp_active ? <License /> : null}\n\n      {page === \"acfw-premium\" ? <PremiumUpsell /> : null}\n\n      {page === \"acfw-help\" ? <Help /> : null}\n\n      {page === \"acfw-about\" ? <About /> : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (store: IStore) => ({ page: store.page });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators({ setStorePage }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { PageActions } from \"../../store/actions/page\";\n\n// Types\nimport { IStore } from \"../../types/store\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwAdminApp: any;\nconst { setStorePage } = PageActions;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n  setStorePage: typeof setStorePage;\n}\n\ninterface IProps {\n  page: string;\n  actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst CouponsNav = (props: IProps) => {\n  const { page, actions } = props;\n  const history = useHistory();\n  const pathPrefix = getPathPrefix();\n\n  const {\n    coupon_nav: { toplevel, links },\n    app_pages,\n  } = acfwAdminApp;\n\n  const handleMenuClick = (id: string) => {\n    history.push(`${pathPrefix}admin.php?page=${id}`);\n    actions.setStorePage({ data: id });\n  };\n\n  return (\n    <>\n      <a\n        href={`${pathPrefix}edit.php?post_type=shop_coupon`}\n        className=\"wp-has-submenu wp-has-current-submenu wp-menu-open menu-top toplevel_page_acfw-admin\"\n        aria-haspopup=\"false\"\n      >\n        <div className=\"wp-menu-arrow\">\n          <div></div>\n        </div>\n        <div className=\"wp-menu-image dashicons-before dashicons-tickets-alt\">\n          <br />\n        </div>\n        <div className=\"wp-menu-name\">{toplevel}</div>\n      </a>\n      <ul className=\"wp-submenu wp-submenu-wrap\">\n        <li className=\"wp-submenu-head\" aria-hidden=\"true\">\n          {toplevel}\n        </li>\n        {links.map(({ link, text }: any, key: number) => (\n          <li key={key} className={key === 0 ? \"wp-first-item\" : \"\"}>\n            <a href={link}>{text}</a>\n          </li>\n        ))}\n        {app_pages.map(({ slug, label }: any) => (\n          <li key={slug} className={slug === page ? `current` : \"\"}>\n            <button\n              className=\"buttonlink\"\n              onClick={() => handleMenuClick(slug)}\n            >\n              {label}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nconst mapStateToProps = (store: IStore) => ({ page: store.page });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators({ setStorePage }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CouponsNav);\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { all, put, call, takeEvery } from \"redux-saga/effects\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {\n  BrowserRouter,\n  Route,\n  useLocation,\n  useHistory,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\nimport * as antd from \"antd\";\nimport * as antdIcons from \"@ant-design/icons\";\nimport {\n  bindActionCreators,\n  createStore,\n  combineReducers,\n  applyMiddleware,\n} from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as lodash from \"lodash\";\nimport moment from \"moment\";\n\n// Store\nimport initializeStore from \"./store\";\n\n// CSS\nimport \"antd/dist/antd.css\";\nimport \"./index.scss\";\n\n// Pages\nimport App from \"./pages/App\";\n\n// Components\nimport CouponsNav from \"./components/CouponsNav\";\n\n// Helpers\nimport axiosInstance from \"./helpers/axios\";\nimport { getPathPrefix, validateURL } from \"./helpers/utils\";\n\n// Actions\nimport { PageActions } from \"./store/actions/page\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var acfwpElements: any;\n\nconst pathPrefix = getPathPrefix();\n\n// Initialize redux store.\nconst store = initializeStore();\n\n// if ACFWP is active, then we export our React instance and other required packages.\nconst exports = {\n  element: React,\n  dom: ReactDOM,\n  router: { BrowserRouter, Route, useLocation, useHistory, Link, Redirect },\n  redux: {\n    bindActionCreators,\n    createStore,\n    combineReducers,\n    applyMiddleware,\n    createSagaMiddleware,\n    connect,\n    sagaEffects: { all, put, call, takeEvery },\n  },\n  lodash,\n  antd,\n  antdIcons,\n  moment,\n  axiosInstance,\n  pathPrefix,\n  validateURL,\n  appStore: {\n    Provider: Provider,\n    store: store,\n    storeActions: { ...PageActions },\n  },\n};\n\nacfwpElements = {\n  ...acfwpElements,\n  ...exports,\n};\n\n// #endregion [Variables]\n\n// #region [Component] =================================================================================================\n\n// Render main app.\ndocument.querySelectorAll(\"#acfw_admin_app\").forEach((domContainer: any) => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <BrowserRouter>\n        <Route path={`${pathPrefix}admin.php`} component={App} />\n      </BrowserRouter>\n    </Provider>,\n    domContainer\n  );\n});\n\n// Replace Advanced Coupons navigation in WP admin sidebar with a React app equivalent.\ndocument\n  .querySelectorAll(\"#toplevel_page_acfw-admin\")\n  .forEach((domContainer: any) => {\n    ReactDOM.render(\n      <Provider store={store}>\n        <BrowserRouter>\n          <Route path={`${pathPrefix}admin.php`} component={CouponsNav} />\n        </BrowserRouter>\n      </Provider>,\n      domContainer\n    );\n  });\n\n// #endregion [Component]\n"],"sourceRoot":""}